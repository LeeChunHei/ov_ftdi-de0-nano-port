module lab0(CLOCK_50,LED,rst_n, o_winc, o_wdata, o_wfull, o_awfull, o_rinc, o_rdata, o_rempty, o_arempty, rclk);

	input  CLOCK_50;   // 50 MHz clock input
	input rst_n;
	output [9:0]LED;  // LED's will represent input and output of adder
	
	input rclk;
	
	output o_winc;
   output [7:0]o_wdata;
   output o_wfull;
   output o_awfull;
   output o_rinc;
   output [7:0]o_rdata;
   output o_rempty;
   output o_arempty;
	
	reg winc;
   reg [7:0]wdata;
   wire wfull;
   wire awfull;
   reg rinc;
   wire [7:0]rdata;
   wire rempty;
   wire arempty;
	
	parameter IDLE = 3'b000;
	parameter WRITE1 = 3'b001;
	parameter WRITE2 = 3'b010;
	
	reg [2:0]state;
	reg [2:0]next_state;
	
	assign LED[2:0] = state;
	
	reg [7:0]rdata_reg;
	
	assign o_winc = winc;
   assign o_wdata = wdata;
   assign o_wfull = wfull;
   assign o_awfull = awfull;
   assign o_rinc = rinc;
   assign o_rdata = rdata_reg;
   assign o_rempty = rempty;
   assign o_arempty = arempty;	
	
	async_fifo 
	#(
        .DSIZE(8),
        .ASIZE(4),
        .FALLTHROUGH("TRUE")
   )
	afifo
	(
		.wclk(CLOCK_50),
      .wrst_n(rst_n),
      .winc(winc),
      .wdata(wdata),
      .wfull(wfull),
      .awfull(awfull),
      .rclk(rclk),
      .rrst_n(rst_n),
      .rinc(rinc),
      .rdata(rdata),
      .rempty(rempty),
      .arempty(arempty)
	);
	
	always @(posedge CLOCK_50 or negedge rst_n) begin
		if (!rst_n) begin
			state <= IDLE;
			next_state <= IDLE;
			winc <= 1'b0;
			wdata <= 8'b00000000;
		end
		else begin
			state <= next_state;
		end
		
		case(state)
			IDLE: begin
				winc <= 1'b0;
				wdata <= 8'b00000000;
				next_state <= WRITE1;
			end
			WRITE1: begin
				winc <= 1'b1;
				wdata <= 8'b11110000;
				next_state <= WRITE2;
			end
			WRITE2: begin
				winc <= 1'b1;
				wdata <= 8'b00001111;
				next_state <= IDLE;
			end
		endcase
	end
	
	always @(posedge rclk or negedge rst_n) begin
		if (!rst_n) begin
			rinc <= 1'b0;
			rdata_reg <= 0;
		end
		else begin
			rinc <= !rempty;
			if (!rempty) begin
				rdata_reg <= rdata;
			end
			end
//		else if (rempty) begin
//			rinc <= 1'b0;
//		end
//		else begin
//			rinc <= 1'b1;
////			rdata_reg <= rdata;
//		end
	end
	
//	wire cout1;
//	wire [3:0]Q;    // output from counter and input to adder
//	wire [2:0]sum;  // output from adder
//
//	assign LED[9:6] = Q;    // output from counter and input to adder
//	assign LED[5:3] = 3'b0; // turn off these LED's
//	assign LED[2:0] = sum;  // output from adder
//
//	// Instantiate counter
//	E15Counter1HzB myCounter(CLOCK_50, 4'd15, Q);  // count from 0 to 15.
//
//	// create a two bit adder, a half adder and a full adder
//	hadd myHalfAdder(Q[0], Q[2], cout1, sum[0]);			// Add low bits
//	fadd myFullAdder(Q[1], Q[3], cout1, sum[2], sum[1]);// Add high bits

endmodule